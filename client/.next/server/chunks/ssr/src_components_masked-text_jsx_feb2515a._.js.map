{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Md%20Hussain/Desktop/zenvok/client/src/components/masked-text.jsx"],"sourcesContent":["\"use client\";\r\nimport { useLayoutEffect, useRef, useEffect, useState } from \"react\";\r\nimport { gsap } from \"gsap\";\r\n\r\nconst MaskedText = ({ text, className = \"\", indent = true }) => {\r\n  const containerRef = useRef(null);\r\n  const textRef = useRef(null);\r\n  const wordContainersRef = useRef([]);\r\n  const wordRefs = useRef([]);\r\n  const [isInView, setIsInView] = useState(false);\r\n  const animationExecuted = useRef(false);\r\n\r\n  const createMaskedWords = () => {\r\n    const element = textRef.current;\r\n    if (!element) return;\r\n\r\n    const words = text.split(\" \");\r\n    element.innerHTML = \"\"; // Clear any content\r\n    wordRefs.current = [];\r\n    wordContainersRef.current = [];\r\n\r\n    const wrapper = document.createElement(\"div\");\r\n    wrapper.style.display = \"flex\";\r\n    wrapper.style.flexWrap = \"wrap\";\r\n    wrapper.style.alignItems = \"flex-start\";\r\n    wrapper.style.justifyContent = \"flex-start\";\r\n\r\n    if (indent) {\r\n      const indentDiv = document.createElement(\"div\");\r\n      indentDiv.style.width = \"3em\";\r\n      indentDiv.style.display = \"inline-block\";\r\n      indentDiv.style.height = \"1px\";\r\n      wrapper.appendChild(indentDiv);\r\n    }\r\n\r\n    words.forEach((word, index) => {\r\n      // Create container with overflow hidden\r\n      const container = document.createElement(\"div\");\r\n      container.style.display = \"inline-block\";\r\n      container.style.overflow = \"hidden\";\r\n      container.style.position = \"relative\";\r\n      container.style.verticalAlign = \"top\";\r\n      container.style.paddingBottom = \"5px\"; // Add padding to prevent clipping\r\n\r\n      // Create word span that will be animated\r\n      const wordSpan = document.createElement(\"span\");\r\n      wordSpan.textContent = word;\r\n      wordSpan.style.display = \"inline-block\";\r\n      wordSpan.style.transform = \"translateY(100%)\"; // Start below - will slide up\r\n      wordSpan.style.willChange = \"transform\"; // Optimize for animation\r\n\r\n      container.appendChild(wordSpan);\r\n      wrapper.appendChild(container);\r\n\r\n      // Store references for animation\r\n      wordContainersRef.current.push(container);\r\n      wordRefs.current.push(wordSpan);\r\n\r\n      // Add space between words\r\n      if (index < words.length - 1) {\r\n        const space = document.createElement(\"span\");\r\n        space.innerHTML = \"\\u00A0\";\r\n        wrapper.appendChild(space);\r\n      }\r\n    });\r\n\r\n    element.appendChild(wrapper);\r\n\r\n    // Force layout calculation to ensure proper sizing\r\n    wordContainersRef.current.forEach((container, i) => {\r\n      const wordHeight = wordRefs.current[i].offsetHeight;\r\n      // Set container height slightly larger than word height to prevent clipping\r\n      container.style.height = `${wordHeight + 2}px`;\r\n    });\r\n  };\r\n\r\n  // Setup Intersection Observer\r\n  useEffect(() => {\r\n    const options = {\r\n      root: null, // viewport\r\n      rootMargin: \"0px\",\r\n      threshold: 0.1, // Trigger when at least 10% of the element is visible\r\n    };\r\n\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          setIsInView(true);\r\n          // Once we've observed it coming into view, we can disconnect\r\n          observer.disconnect();\r\n        }\r\n      });\r\n    }, options);\r\n\r\n    if (containerRef.current) {\r\n      observer.observe(containerRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (observer) {\r\n        observer.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Handle creating masked words\r\n  useLayoutEffect(() => {\r\n    createMaskedWords();\r\n\r\n    // Set initial position - explicitly position words outside their containers\r\n    gsap.set(wordRefs.current, {\r\n      y: \"100%\",\r\n      immediateRender: true,\r\n    });\r\n  }, [text]);\r\n\r\n  // Handle animation when in view\r\n  useEffect(() => {\r\n    if (isInView && !animationExecuted.current && wordRefs.current.length > 0) {\r\n      // Add a small delay to ensure everything is properly set\r\n      setTimeout(() => {\r\n        gsap.to(wordRefs.current, {\r\n          y: \"0%\",\r\n          duration: 0.6,\r\n          ease: \"power3.out\",\r\n          stagger: 0.05,\r\n          onComplete: () => {\r\n            animationExecuted.current = true;\r\n\r\n            // Update container heights after animation completes\r\n            wordContainersRef.current.forEach((container, i) => {\r\n              const wordHeight = wordRefs.current[i].offsetHeight;\r\n              container.style.height = `${wordHeight + 6}px`;\r\n            });\r\n          },\r\n        });\r\n      }, 100);\r\n    }\r\n  }, [isInView]);\r\n\r\n  return (\r\n    <div ref={containerRef}>\r\n      <h1\r\n        ref={textRef}\r\n        className={`text-black font-extralight tracking-tight mb-12 ${className}`}\r\n      >\r\n        {text}\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaskedText;\r\n"],"names":[],"mappings":"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","debugId":null}}]
}